pipeline {
    agent {
        label 'slave-node-1'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        SONAR_URL = "https://sonarqube.swapnilahirekar.in"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/SwapnilDA-20/tedxntua2020.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-creds', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.login=$SONAR_AUTH_TOKEN \
                        -Dsonar.host.url=${SONAR_URL} \
                        -Dsonar.projectName=Tedxapp2020 \
                        -Dsonar.projectKey=Tedxapp2020
                    '''
                }
            }
        }
 stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "swapnil2026/tedxapp2020:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub-creds')
      }
      steps {
        script {
            sh 'whoami'
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            withDockerRegistry(credentialsId: "dockerhub-creds") {
            dockerImage.push()          
                }
            }
          }
        }
    stage('Deployment') {
        steps { 
                    withCredentials([string(credentialsId: 'argocd', variable: 'ARGOCD_AUTH_TOKEN')]){
                    sh '''
                        ARGOCD_SERVER="argocd.swapnilahirekar.in"
                        APP_NAME="tedx2020"
                        argocd app list --server $ARGOCD_SERVER --grpc-web
                        argocd app get $APP_NAME  --server $ARGOCD_SERVER --grpc-web
                        argocd app set $APP_NAME --server $ARGOCD_SERVER -p image.tag=$BUILD_NUMBER
                        argocd app sync $APP_NAME --server $ARGOCD_SERVER --grpc-web
                     '''
          }
        }
      }
    }
}

